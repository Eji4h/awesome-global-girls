---
// No props needed for this component
---

<!-- Search Section -->
<div class="search-section mb-8">
  <div class="max-w-2xl mx-auto">
    <div class="relative">
      <input
        type="text"
        id="searchInput"
        placeholder="Search by name, country, or field..."
        class="input input-bordered input-lg w-full pr-12 pl-12"
      />
      <svg
        class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-base-content/50"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
      </svg>
      <button
        id="clearSearch"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 btn btn-ghost btn-sm hidden"
        title="Clear search"
      >
        âœ•
      </button>
    </div>
    <div
      id="searchResults"
      class="mt-4 text-center text-sm text-base-content/70 hidden"
    >
      <span id="resultCount">0</span> results found
    </div>
  </div>
</div>

<script>
  // Search functionality
  const searchInput = document.getElementById(
    'searchInput'
  ) as HTMLInputElement;
  const clearButton = document.getElementById(
    'clearSearch'
  ) as HTMLButtonElement;
  const searchResults = document.getElementById(
    'searchResults'
  ) as HTMLDivElement;
  const resultCount = document.getElementById(
    'resultCount'
  ) as HTMLSpanElement;
  const girlsGrid = document.getElementById('girlsGrid') as HTMLDivElement;
  const girlCards = document.querySelectorAll(
    '.girl-card'
  ) as NodeListOf<HTMLElement>;
  const totalGirls = girlCards.length;

  function performSearch() {
    if (!searchInput || !clearButton || !searchResults || !resultCount)
      return;

    const searchTerm = searchInput.value.toLowerCase().trim();

    if (searchTerm === '') {
      // Show all cards
      girlCards.forEach((card) => {
        card.style.display = 'block';
      });
      searchResults.classList.add('hidden');
      clearButton.classList.add('hidden');
      return;
    }

    let visibleCount = 0;

    girlCards.forEach((card) => {
      const name = card.dataset.name || '';
      const country = card.dataset.country || '';
      const field = card.dataset.field || '';

      const matches =
        name.includes(searchTerm) ||
        country.includes(searchTerm) ||
        field.includes(searchTerm);

      if (matches) {
        card.style.display = 'block';
        visibleCount++;
      } else {
        card.style.display = 'none';
      }
    });

    // Update results display
    resultCount.textContent = visibleCount.toString();
    searchResults.classList.remove('hidden');
    clearButton.classList.remove('hidden');
  }

  function clearSearch() {
    if (!searchInput) return;
    searchInput.value = '';
    performSearch();
    searchInput.focus();
  }

  // Event listeners
  if (searchInput) {
    searchInput.addEventListener('input', performSearch);
    searchInput.focus();
  }

  if (clearButton) {
    clearButton.addEventListener('click', clearSearch);
  }
</script>
